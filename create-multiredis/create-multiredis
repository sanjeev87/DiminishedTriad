#!/bin/bash

# Settings
PORT=30000
TIMEOUT=2000
NODES=6
REPLICAS=1
SENTINELOFFSET=10000
# You may want to put the above config parameters into config.sh in order to
# override the defaults without modifying this script.

if [ -a config.sh ]
then
    source "config.sh"
fi

# Computed vars
ENDPORT=$((PORT+NODES))

if [ "$1" == "start" ]
then
    while [ $((PORT < ENDPORT)) != "0" ]; do
        PORT=$((PORT+1))
        echo "Starting $PORT"
        redis-server --port $PORT --appendonly yes --appendfilename appendonly-${PORT}.aof --dbfilename dump-${PORT}.rdb --logfile ${PORT}.log --daemonize yes --loglevel verbose
    done
    exit 0
fi


if [ "$1" == "sentinel" ]
then
    SPORT=$((PORT+SENTINELOFFSET))
 
    # while [ $((SPORT < ENDPORT + SENTINELOFFSET)) != "0" ]; do
        SPORT=$((SPORT+1))
        echo "Starting Sentinel on $SPORT"
        printf "port %s\n" ${SPORT} >> ${SPORT}.conf

        while [ $((PORT < ENDPORT)) != "0" ]; do
            PORT=$((PORT+1))
            printf "sentinel monitor masterP_%s 127.0.0.1 %d 2\n" ${PORT} ${PORT} >> ${SPORT}.conf

            printf "sentinel down-after-milliseconds masterP_%s  5000\n"  ${PORT}>> ${SPORT}.conf
            printf "sentinel failover-timeout masterP_%s 60000\n"  ${PORT} >> ${SPORT}.conf
        done
        redis-server ${SPORT}.conf --sentinel
    # done
    exit 0
fi
# if [ "$1" == "create" ]
# then
#     HOSTS=""
#     while [ $((PORT < ENDPORT)) != "0" ]; do
#         PORT=$((PORT+1))
#         HOSTS="$HOSTS 127.0.0.1:$PORT"
#     done
#     ../../src/redis-trib.rb create --replicas $REPLICAS $HOSTS
#     exit 0
# fi

if [ "$1" == "stop" ]
then
    while [ $((PORT < ENDPORT)) != "0" ]; do
        PORT=$((PORT+1))
        echo "Stopping $PORT"
        redis-cli -p $PORT shutdown nosave
    done

    # sentinels can't be killed regularly. Ctrl-C looks like the only way for now..
    SPORT=$((PORT+SENTINELOFFSET))
    # while [ $((SPORT < ENDPORT + SENTINELOFFSET)) != "0" ]; do
        SPORT=$((SPORT+1))
        redis-cli -p $SPORT shutdown
    # done
    exit 0
fi

# if [ "$1" == "watch" ]
# then
#     PORT=$((PORT+1))
#     while [ 1 ]; do
#         clear
#         date
#         ../../src/redis-cli -p $PORT cluster nodes | head -30
#         sleep 1
#     done
#     exit 0
# fi

if [ "$1" == "tail" ]
then
    INSTANCE=$2
    PORT=$((PORT+INSTANCE))
    tail -f ${PORT}.log
    exit 0
fi

if [ "$1" == "call" ]
then
    while [ $((PORT < ENDPORT)) != "0" ]; do
        PORT=$((PORT+1))
        ../../src/redis-cli -p $PORT $2 $3 $4 $5 $6 $7 $8 $9
    done
    exit 0
fi

if [ "$1" == "clean" ]
then
    rm -rf *.log
    rm -rf appendonly*.aof
    rm -rf dump*.rdb
    rm -rf nodes*.conf
    rm -rf *.conf
    exit 0
fi

echo "Usage: $0 [start|create|stop|watch|tail|clean]"
echo "start       -- Launch Redis Cluster instances."
echo "create      -- Create a cluster using redis-trib create."
echo "stop        -- Stop Redis Cluster instances."
echo "watch       -- Show CLUSTER NODES output (first 30 lines) of first node."
echo "tail <id>   -- Run tail -f of instance at base port + ID."
echo "clean       -- Remove all instances data, logs, configs."
